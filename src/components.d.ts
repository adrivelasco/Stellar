/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';

import 'ionicons';
import '@stencil/router';
import '@stencil/state-tunnel';


import {
  LocationSegments,
  MatchResults,
  RouterHistory,
} from '@stencil/router';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface WebAudioDebugger {
      'addHistory': (string: History) => void;
      'count': number;
    }

    interface WebAudioEffect {
      'attachEffect': (context: any, source: any) => string;
      'axis': string;
      'method': string;
      'midicontroller': number;
      'responds': string;
      'type': string;
      'use': string;
      'value': number;
    }

    interface WebAudioSequencer {
      'autoplay': boolean;
      'custom': Function;
      'name': string;
      'play': () => void;
      'stop': () => void;
      'taps': number;
      'tempo': number;
    }

    interface WebAudioSource {
      'assignBuffer': (webAudio: any, buffer: any) => void;
      'effectsvolume': number;
      'gain': (place?: string) => GainNode;
      'getBuffer': () => AudioBuffer;
      'getDuration': () => number;
      'inert': boolean;
      'midichannel': number;
      'midikey': number;
      'name': string;
      'pause': () => void;
      'play': () => void;
      'playing': boolean;
      'prepare': () => void;
      'skipTo': (time: any) => void;
      'src': string;
      'stop': () => void;
      'toggle': () => void;
      'webAudio': () => HTMLElement;
    }

    interface WebAudioVisualizerShader {
      'type': string;
    }

    interface WebAudioVisualizer {
      'color': string;
      'connect': (context: AudioContext, destination: any) => this;
      'for': string;
      'height': number;
      'renderer': AnalyserNode;
      'size': number;
      'smoothing': number;
      'type': string|"wave"|"bars"|"webgl";
      'width': number;
    }

    interface WebAudio {
      'autoplay': Boolean;
      'connect_the_world': () => Promise<boolean>;
      'get_context': () => AudioContext;
      'is_prepared': () => Boolean;
      'midi': Boolean;
      'name': string;
      'source': (name: any) => any;
    }

    interface StellarAssetLibrary {

    }

    interface StellarColorLibrary {

    }

    interface StellarMarkdown {
      'codeString': string;
      'src': string;
    }

    interface StellarScatter {
      'colors': boolean;
      'float': boolean;
      'max': number;
      'min': number;
      'scatter': number;
      'sizes': boolean;
    }

    interface StellarStarscape {

    }

    interface StellarStory {
      'target': string;
    }

    interface StellarStripe {
      'connect': () => void;
      'getToken': () => Promise<boolean>;
      'name': string;
      'setError': (error: string) => void;
      'token': string;
    }

    interface StellarThemePreview {
      'base': string;
      'complement': string;
    }

    interface StellarUnit {
      'decimals': number;
      'from': string;
      'round': boolean;
      'to': string;
      'value': number;
    }

    interface Stellar360Image {
      'height': number;
      'poster': string;
      'src': string;
      'width': number;
    }

    interface Stellar360Video {
      'height': number;
      'poster': string;
      'src': string;
      'width': number;
    }

    interface StellarImage {
      'bg': string;
      'height': number;
      'medium': () => any;
      'nozoom': boolean;
      'poster': string;
      'width': number;
    }

    interface StellarInterviewLine {
      'complement': boolean;
      'in': number;
      'out': number;
    }

    interface StellarInterview {
      'aspectRatio': number;
      'debug': boolean;
      'height': number;
      'label': string;
      'pause': () => void;
      'play': () => void;
      'playing': boolean;
      'skipTo': (time: number) => void;
      'src': string;
      'toggle': () => void;
      'width': number;
    }

    interface SkeletonImg {
      'height': number;
      'icon': boolean;
      'loading': boolean;
      'width': number;
    }

    interface SkeletonText {
      'as': string|'h1'|'h2'|'h3'|'h4'|'h5'|'h6'|'p';
      'loading': boolean;
      'width': number;
    }

    interface StellarVideo {
      'autoplay': boolean;
      'controls': boolean;
      'height': number;
      'muted': boolean;
      'overlay': boolean;
      'playsinline': boolean;
      'poster': string;
      'preload': string;
      'width': number;
    }

    interface StellarAnimateText {
      'method': string|"glitch"|"lettering"|"weight"|"fade";
    }

    interface StellarBlur {
      'horizontal': number;
      'setBlurFilter': () => void;
      'vertical': number;
    }

    interface StellarParallaxSection {
      'layer': number;
      'percentage': number;
      'speed': number;
    }

    interface StellarParallax {
      'reload': () => void;
    }

    interface StellarAccordion {
      'label': string;
      'name': string;
      'open': boolean;
      'refresh': () => void;
      'tight': boolean;
    }

    interface StellarAsset {
      'align': string;
      'ariaLabel': string;
      'block': boolean;
      'language': string;
      'name': string;
      'src': string;
    }

    interface StellarAvatar {
      'color': string;
      'initials': string;
      'name': string;
      'notooltip': boolean;
      'processing': boolean;
      'shape': "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
      'size': string;
      'src': string;
    }

    interface StellarBreadcrumb {
      'color': string;
      'disabled': boolean;
      'href': string;
      'label': string;
      'target': string;
    }

    interface StellarBreadcrumbs {
      'color': string;
      'description': string;
      'home': string;
      'icon': string;
      'icon_size': number;
      'icon_src': string;
      'label': string;
    }

    interface StellarButton {
      /**
       * Sets the button or link as an active state.
       */
      'active': boolean;
      /**
       * Sets the button or link to render at full width to the parent.
       */
      'block': boolean;
      /**
       * Sets the button or link to provide the affordance of a dangerous action.
       */
      'danger': boolean;
      /**
       * Sets the button or link as disabled and not-interactable.
       */
      'disabled': boolean;
      /**
       * Sets the href on the anchor tag if the button is a link.
       */
      'for': string;
      'ghost': boolean;
      /**
       * Sets the href on the anchor tag if the button is a link.
       */
      'href': string;
      /**
       * Sets the button or link as a button with only an icon.
       */
      'icon': boolean;
      /**
       * Sets the button or link as an outlined button.
       */
      'invert': boolean;
      /**
       * Sets accessibility options on the buttons
       */
      'label': string;
      /**
       * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
       */
      'name': string;
      /**
       * Sets the button or link as an outlined button.
       */
      'outline': boolean;
      /**
       * Sets the padding inside of the button. Can be small, medium, or large.
       */
      'padding': string|"small"|"medium"|"large";
      /**
       * Sets the button or link to render as a pill.
       */
      'pill': boolean;
      /**
       * Sets the button or link as processing when clicked.
       */
      'processable': boolean;
      /**
       * Sets the size of the button. Can be tiny, small, medium, or large.
       */
      'size': string|"tiny"|"small"|"medium"|"large";
      /**
       * Allows the button to render for different tags.
       */
      'tag': "button"|"submit"|"link"|"span";
      /**
       * Sets the target on the anchor tag if the button is a link.
       */
      'target': string;
      /**
       * Sets the value on the button if the button is an input.
       */
      'value': string;
    }

    interface StellarCallout {
      'type': "alert"|"error"|"info"|"success";
    }

    interface StellarCard {
      /**
       * Sets the href on the anchor tag if the button is a link.
       */
      'for': string;
      /**
       * Sets the href if the card is a link.
       */
      'href': string;
      /**
       * Sets the name if the card is a button.
       */
      'name': string;
      /**
       * Sets the padding inside of the button. Can be small, medium, or large.
       */
      'padding': string|"small"|"medium"|"large";
      /**
       * Renders a shadow on the card
       */
      'shadow': string|"light"|"medium"|"heavy";
      /**
       * Sets the element to render the card as - an anchor tag, a button, or a div.
       */
      'tag': "a"|"button"|"div";
      'transition': boolean;
      /**
       * Sets the value if the card is a button.
       */
      'value': string;
    }

    interface StellarChart {
      'data': (data: any) => void;
      'for': string;
      'options': (newOptions: any) => void;
      'random': boolean;
      'refresh': () => void;
      'remote': string;
      'series': (data: any) => void;
      'type': string;
    }

    interface StellarCodeBlock {
      'codeString': string;
      'copy': boolean;
      'language': string;
      'numbers': boolean;
      'result': () => any;
      'simple': boolean;
    }

    interface StellarCode {
      'codeString': string;
      'copy': () => void;
      'highlight': () => void;
      'language': string;
      'numbers': boolean;
      'result': () => string;
      'setCode': (code: any) => void;
    }

    interface StellarColorPicker {
      'value': string;
    }

    interface StellarComment {
      'content': any;
      'name': any;
    }

    interface StellarComments {

    }

    interface StellarContent {
      'for': string;
      'name': string;
      'open': boolean;
    }

    interface CopyWrap {
      'align': string;
      'full': boolean;
    }

    interface StellarDocsComponent {
      'match': MatchResults;
      'pull_data': () => Promise<void>;
      'show_data': () => any;
    }

    interface StellarDocsHeader {
      'complement': string;
      'invert': boolean;
      'mark': string;
      'max': number;
      'theme': string;
      'value': number;
    }

    interface StellarDocsHome {

    }

    interface StellarDocsNavigation {

    }

    interface StellarDocsNotFound {

    }

    interface StellarDocsPage {
      'match': MatchResults;
    }

    interface StellarDocs {

    }

    interface StellarDocumentation {
      'codeString': string;
      'feature': string;
      'preview': boolean;
      'property': string;
      'reload': () => void;
      'type': string;
    }

    interface StellarDropdown {
      'icon': boolean;
      'label': string;
      'open': boolean;
      'position': "left"|"center"|"right";
    }

    interface StellarFooter {

    }

    interface StellarForm {
      'acceptCharset': string;
      'action': string;
      'ajax': boolean;
      'autocomplete': string;
      'enctype': string;
      'method': string;
      'name': string;
      'novalidate': boolean;
      'refresh': () => void;
      'submit': () => void;
      'target': string;
    }

    interface StellarGrid {
      'align': string;
      'cols': number|string;
      'compact': boolean;
      'padding': boolean;
      'refresh': () => void;
      'responsive': boolean;
    }

    interface StellarGroupOverflow {
      'count': number;
      'size': string;
    }

    interface StellarGroup {
      'count': number;
      'overflow': boolean;
      'size': string;
    }

    interface StellarHeader {
      'invert': boolean;
      'mark': string;
      'max': number;
      'value': number;
    }

    interface StellarInput {
      'autocomplete': string;
      'autofocus': boolean;
      'color': string;
      'cols': number;
      'disabled': boolean;
      'focused': boolean;
      'getId': () => string;
      'getStrength': () => object;
      'invalid': (message: string | boolean, valid?: boolean, level?: number) => void;
      'label': string;
      'match': string;
      'max': number;
      'maxlength': number;
      'min': number;
      /**
       * The name of the input element
       */
      'name': string;
      'novalidation': boolean;
      'placeholder': string;
      'readonly': boolean;
      'required': boolean;
      'rows': number;
      'setStrength': (value: number) => void;
      'size': string;
      'spellcheck': boolean;
      'step': number;
      /**
       * The kind of element that the Input should be rendered as
       */
      'type': string;
      'val': () => any;
      'validate': () => { errors?: any; valid?: boolean; level?: number; };
      'validates': string;
      /**
       * The pre-set value to pass to the input element
       */
      'value': any;
      'wrap': string;
    }

    interface StellarItem {
      'apply': (data: any) => void;
      'danger': boolean;
      'data': () => { size: string; value: string; type: "a" | "button"; label: string; danger: boolean; slotted: any; };
      'fit': boolean;
      'focused': boolean;
      'history': RouterHistory;
      'href': string;
      'label': string;
      'location': LocationSegments;
      'route': boolean;
      'selectable': boolean;
      'selected': boolean;
      'setFocus': () => void;
      'size': string;
      'type': "a"|"button";
      'value': string;
    }

    interface StellarLabel {
      'for': string;
    }

    interface StellarLayout {
      'align': "baseline"|"center"|"top"|"bottom";
      'padding': "tiny"|"small"|"medium"|"large";
      'refresh': () => void;
      'size': "tiny"|"small"|"medium"|"large"|"full"|"flush";
      'type': string;
    }

    interface StellarList {
      'append_to': (value: any) => void;
      'itemHeight': number;
      'items': Array<any>;
      'mount': () => void;
      'prepend_to': (value: any) => void;
      'refresh': () => void;
      'updateConfig': (config: any) => void;
    }

    interface StellarMessage {
      'closable': boolean;
      'name': string;
      'remember': boolean;
      'size': "full"|"default";
      'striped': boolean;
      'type': "alert"|"error"|"info"|"success";
      'visible': boolean;
    }

    interface StellarModalController {
      'close': () => Promise<boolean>;
      'open': (modalName: any, originalContent: any) => Promise<boolean>;
      'size': string;
      'state': string|"opening"|"open"|"closing"|"closed"|"empty";
      'timing': number;
    }

    interface StellarModal {
      'active': boolean;
      'cloned': boolean;
      'close': () => boolean;
      'header': boolean;
      'name': string;
      'open': () => boolean;
      'size': string;
    }

    interface StellarOverlay {
      'open': boolean;
    }

    interface StellarPagination {
      'color': string;
      'current': number;
      'padding': number;
      /**
       * Public: Sets the max cap of pages you can skip through
       */
      'pages': number;
      'type': "full"|"compact";
      'url': any;
    }

    interface StellarProgress {
      'blurable': boolean;
      /**
       * Allows the progress bar to be clicked on, to help the user to navigate through the progressing content.
       */
      'editable': boolean;
      /**
       * Sets the maximum cap for steps in the progress bar
       */
      'max': number;
      /**
       * eliminates the easing in the css so you can apply value updates without jitter.
       */
      'noease': boolean;
      /**
       * Renders if this element is slender or not
       */
      'slender': boolean;
      /**
       * Sets the value of the progress bar
       */
      'value': number;
    }

    interface StellarQuickActions {
      'open': boolean;
    }

    interface StellarSelect {
      'focused': boolean;
      'footer': boolean;
      'inline': boolean;
      'label': string;
      'multiple': boolean;
      'name': string;
      'open': boolean;
      'other': boolean;
      'overlay': boolean;
      'placeholder': string;
      'processing': boolean;
      'required': boolean;
      'size': string;
      'validate': () => { errors?: any; valid?: boolean; level?: number; };
      'value': any;
    }

    interface StellarSlide {
      'motion': number;
    }

    interface StellarSlides {
      'autoHeight': boolean;
      'centeredSlides': boolean;
      'direction': "horizontal"|"vertical";
      'effect': "slide"|"fade"|"cube"|"coverflow"|"flip";
      /**
       * Get the index of the active slide.
       */
      'getActiveIndex': () => number;
      /**
       * Get the index of the previous slide.
       */
      'getPreviousIndex': () => number;
      /**
       * Get whether or not the current slide is the first slide.
       */
      'isBeginning': () => boolean;
      /**
       * Get whether or not the current slide is the last slide.
       */
      'isEnd': () => boolean;
      /**
       * Get the total number of slides.
       */
      'length': () => number;
      /**
       * Lock or unlock the ability to slide to the next slides.
       */
      'lockSwipeToNext': (shouldLockSwipeToNext: boolean) => any;
      /**
       * Lock or unlock the ability to slide to the previous slides.
       */
      'lockSwipeToPrev': (shouldLockSwipeToPrev: boolean) => any;
      /**
       * Lock or unlock the ability to slide to change slides.
       */
      'lockSwipes': (shouldLockSwipes: boolean) => any;
      'loop': boolean;
      'nested': boolean;
      /**
       * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
       */
      'options': any;
      /**
       * Show or hide the pager
       */
      'pager': boolean;
      'pagination': boolean;
      /**
       * Transition to the next slide.
       */
      'slideNext': (speed?: number, runCallbacks?: boolean) => void;
      /**
       * Transition to the previous slide.
       */
      'slidePrev': (speed?: number, runCallbacks?: boolean) => void;
      /**
       * Transition to the specified slide.
       */
      'slideTo': (index: number, speed?: number, runCallbacks?: boolean) => void;
      'slidesPerView': number;
      'spaceBetween': number;
      'speed': number;
      /**
       * Start auto play.
       */
      'startAutoplay': () => void;
      /**
       * Stop auto play.
       */
      'stopAutoplay': () => void;
      /**
       * Update the underlying slider implementation. Call this if you've added or removed child slides.
       */
      'update': () => void;
      'watchSlidesProgress': boolean;
      'watchSlidesVisibility': boolean;
    }

    interface StellarStep {
      'disabled': boolean;
      'href': string;
      'open': boolean;
      'order': number;
      'tabCount': number;
    }

    interface StellarSteps {
      'contents': () => any[];
      'name': string;
      'steps': () => any[];
    }

    interface StellarSwitch {
      'checked': boolean;
    }

    interface StellarTab {
      'disabled': boolean;
      'href': string;
      'notifications': boolean|number;
      'open': boolean;
      'order': number;
      'tabCount': number;
      'tag': string;
    }

    interface StellarTable {
      'chart': boolean;
      'name': string;
      'striped': boolean;
      'upgrade': boolean;
    }

    interface StellarTabs {
      'block': boolean;
      'blurring': number;
      'contents': () => any[];
      'height': string;
      'name': string;
      'noanimation': boolean;
      'tabs': () => any[];
    }

    interface StellarTag {
      'color': string;
      'outline': boolean;
      'pill': boolean;
      'size': string;
      'textColor': string;
    }

    interface StellarToggleOption {
      'checked': boolean;
      'default': string;
      'for': string;
      'icon': boolean;
      'inline': boolean;
      'name': string;
      'required': boolean;
      'selectedCopy': string;
      'single': boolean;
      'size': boolean;
      'type': string;
      'updateSelected': (value: boolean) => void;
      'value': string;
    }

    interface StellarToggle {
      'card': string;
      'flip': boolean;
      'label': string;
      'name': string;
      'required': boolean;
      'single': boolean;
      'size': string;
      'stacked': boolean;
      'type': string|"checkbox"|"radio"|"radio-block"|"checkbox-block";
      'value': string;
    }

    interface StellarTooltip {
      'align': "left"|"center"|"right";
    }
  }


    interface HTMLWebAudioDebuggerElement extends StencilComponents.WebAudioDebugger, HTMLStencilElement {}

    var HTMLWebAudioDebuggerElement: {
      prototype: HTMLWebAudioDebuggerElement;
      new (): HTMLWebAudioDebuggerElement;
    };
    

    interface HTMLWebAudioEffectElement extends StencilComponents.WebAudioEffect, HTMLStencilElement {}

    var HTMLWebAudioEffectElement: {
      prototype: HTMLWebAudioEffectElement;
      new (): HTMLWebAudioEffectElement;
    };
    

    interface HTMLWebAudioSequencerElement extends StencilComponents.WebAudioSequencer, HTMLStencilElement {}

    var HTMLWebAudioSequencerElement: {
      prototype: HTMLWebAudioSequencerElement;
      new (): HTMLWebAudioSequencerElement;
    };
    

    interface HTMLWebAudioSourceElement extends StencilComponents.WebAudioSource, HTMLStencilElement {}

    var HTMLWebAudioSourceElement: {
      prototype: HTMLWebAudioSourceElement;
      new (): HTMLWebAudioSourceElement;
    };
    

    interface HTMLWebAudioVisualizerShaderElement extends StencilComponents.WebAudioVisualizerShader, HTMLStencilElement {}

    var HTMLWebAudioVisualizerShaderElement: {
      prototype: HTMLWebAudioVisualizerShaderElement;
      new (): HTMLWebAudioVisualizerShaderElement;
    };
    

    interface HTMLWebAudioVisualizerElement extends StencilComponents.WebAudioVisualizer, HTMLStencilElement {}

    var HTMLWebAudioVisualizerElement: {
      prototype: HTMLWebAudioVisualizerElement;
      new (): HTMLWebAudioVisualizerElement;
    };
    

    interface HTMLWebAudioElement extends StencilComponents.WebAudio, HTMLStencilElement {}

    var HTMLWebAudioElement: {
      prototype: HTMLWebAudioElement;
      new (): HTMLWebAudioElement;
    };
    

    interface HTMLStellarAssetLibraryElement extends StencilComponents.StellarAssetLibrary, HTMLStencilElement {}

    var HTMLStellarAssetLibraryElement: {
      prototype: HTMLStellarAssetLibraryElement;
      new (): HTMLStellarAssetLibraryElement;
    };
    

    interface HTMLStellarColorLibraryElement extends StencilComponents.StellarColorLibrary, HTMLStencilElement {}

    var HTMLStellarColorLibraryElement: {
      prototype: HTMLStellarColorLibraryElement;
      new (): HTMLStellarColorLibraryElement;
    };
    

    interface HTMLStellarMarkdownElement extends StencilComponents.StellarMarkdown, HTMLStencilElement {}

    var HTMLStellarMarkdownElement: {
      prototype: HTMLStellarMarkdownElement;
      new (): HTMLStellarMarkdownElement;
    };
    

    interface HTMLStellarScatterElement extends StencilComponents.StellarScatter, HTMLStencilElement {}

    var HTMLStellarScatterElement: {
      prototype: HTMLStellarScatterElement;
      new (): HTMLStellarScatterElement;
    };
    

    interface HTMLStellarStarscapeElement extends StencilComponents.StellarStarscape, HTMLStencilElement {}

    var HTMLStellarStarscapeElement: {
      prototype: HTMLStellarStarscapeElement;
      new (): HTMLStellarStarscapeElement;
    };
    

    interface HTMLStellarStoryElement extends StencilComponents.StellarStory, HTMLStencilElement {}

    var HTMLStellarStoryElement: {
      prototype: HTMLStellarStoryElement;
      new (): HTMLStellarStoryElement;
    };
    

    interface HTMLStellarStripeElement extends StencilComponents.StellarStripe, HTMLStencilElement {}

    var HTMLStellarStripeElement: {
      prototype: HTMLStellarStripeElement;
      new (): HTMLStellarStripeElement;
    };
    

    interface HTMLStellarThemePreviewElement extends StencilComponents.StellarThemePreview, HTMLStencilElement {}

    var HTMLStellarThemePreviewElement: {
      prototype: HTMLStellarThemePreviewElement;
      new (): HTMLStellarThemePreviewElement;
    };
    

    interface HTMLStellarUnitElement extends StencilComponents.StellarUnit, HTMLStencilElement {}

    var HTMLStellarUnitElement: {
      prototype: HTMLStellarUnitElement;
      new (): HTMLStellarUnitElement;
    };
    

    interface HTMLStellar360ImageElement extends StencilComponents.Stellar360Image, HTMLStencilElement {}

    var HTMLStellar360ImageElement: {
      prototype: HTMLStellar360ImageElement;
      new (): HTMLStellar360ImageElement;
    };
    

    interface HTMLStellar360VideoElement extends StencilComponents.Stellar360Video, HTMLStencilElement {}

    var HTMLStellar360VideoElement: {
      prototype: HTMLStellar360VideoElement;
      new (): HTMLStellar360VideoElement;
    };
    

    interface HTMLStellarImageElement extends StencilComponents.StellarImage, HTMLStencilElement {}

    var HTMLStellarImageElement: {
      prototype: HTMLStellarImageElement;
      new (): HTMLStellarImageElement;
    };
    

    interface HTMLStellarInterviewLineElement extends StencilComponents.StellarInterviewLine, HTMLStencilElement {}

    var HTMLStellarInterviewLineElement: {
      prototype: HTMLStellarInterviewLineElement;
      new (): HTMLStellarInterviewLineElement;
    };
    

    interface HTMLStellarInterviewElement extends StencilComponents.StellarInterview, HTMLStencilElement {}

    var HTMLStellarInterviewElement: {
      prototype: HTMLStellarInterviewElement;
      new (): HTMLStellarInterviewElement;
    };
    

    interface HTMLSkeletonImgElement extends StencilComponents.SkeletonImg, HTMLStencilElement {}

    var HTMLSkeletonImgElement: {
      prototype: HTMLSkeletonImgElement;
      new (): HTMLSkeletonImgElement;
    };
    

    interface HTMLSkeletonTextElement extends StencilComponents.SkeletonText, HTMLStencilElement {}

    var HTMLSkeletonTextElement: {
      prototype: HTMLSkeletonTextElement;
      new (): HTMLSkeletonTextElement;
    };
    

    interface HTMLStellarVideoElement extends StencilComponents.StellarVideo, HTMLStencilElement {}

    var HTMLStellarVideoElement: {
      prototype: HTMLStellarVideoElement;
      new (): HTMLStellarVideoElement;
    };
    

    interface HTMLStellarAnimateTextElement extends StencilComponents.StellarAnimateText, HTMLStencilElement {}

    var HTMLStellarAnimateTextElement: {
      prototype: HTMLStellarAnimateTextElement;
      new (): HTMLStellarAnimateTextElement;
    };
    

    interface HTMLStellarBlurElement extends StencilComponents.StellarBlur, HTMLStencilElement {}

    var HTMLStellarBlurElement: {
      prototype: HTMLStellarBlurElement;
      new (): HTMLStellarBlurElement;
    };
    

    interface HTMLStellarParallaxSectionElement extends StencilComponents.StellarParallaxSection, HTMLStencilElement {}

    var HTMLStellarParallaxSectionElement: {
      prototype: HTMLStellarParallaxSectionElement;
      new (): HTMLStellarParallaxSectionElement;
    };
    

    interface HTMLStellarParallaxElement extends StencilComponents.StellarParallax, HTMLStencilElement {}

    var HTMLStellarParallaxElement: {
      prototype: HTMLStellarParallaxElement;
      new (): HTMLStellarParallaxElement;
    };
    

    interface HTMLStellarAccordionElement extends StencilComponents.StellarAccordion, HTMLStencilElement {}

    var HTMLStellarAccordionElement: {
      prototype: HTMLStellarAccordionElement;
      new (): HTMLStellarAccordionElement;
    };
    

    interface HTMLStellarAssetElement extends StencilComponents.StellarAsset, HTMLStencilElement {}

    var HTMLStellarAssetElement: {
      prototype: HTMLStellarAssetElement;
      new (): HTMLStellarAssetElement;
    };
    

    interface HTMLStellarAvatarElement extends StencilComponents.StellarAvatar, HTMLStencilElement {}

    var HTMLStellarAvatarElement: {
      prototype: HTMLStellarAvatarElement;
      new (): HTMLStellarAvatarElement;
    };
    

    interface HTMLStellarBreadcrumbElement extends StencilComponents.StellarBreadcrumb, HTMLStencilElement {}

    var HTMLStellarBreadcrumbElement: {
      prototype: HTMLStellarBreadcrumbElement;
      new (): HTMLStellarBreadcrumbElement;
    };
    

    interface HTMLStellarBreadcrumbsElement extends StencilComponents.StellarBreadcrumbs, HTMLStencilElement {}

    var HTMLStellarBreadcrumbsElement: {
      prototype: HTMLStellarBreadcrumbsElement;
      new (): HTMLStellarBreadcrumbsElement;
    };
    

    interface HTMLStellarButtonElement extends StencilComponents.StellarButton, HTMLStencilElement {}

    var HTMLStellarButtonElement: {
      prototype: HTMLStellarButtonElement;
      new (): HTMLStellarButtonElement;
    };
    

    interface HTMLStellarCalloutElement extends StencilComponents.StellarCallout, HTMLStencilElement {}

    var HTMLStellarCalloutElement: {
      prototype: HTMLStellarCalloutElement;
      new (): HTMLStellarCalloutElement;
    };
    

    interface HTMLStellarCardElement extends StencilComponents.StellarCard, HTMLStencilElement {}

    var HTMLStellarCardElement: {
      prototype: HTMLStellarCardElement;
      new (): HTMLStellarCardElement;
    };
    

    interface HTMLStellarChartElement extends StencilComponents.StellarChart, HTMLStencilElement {}

    var HTMLStellarChartElement: {
      prototype: HTMLStellarChartElement;
      new (): HTMLStellarChartElement;
    };
    

    interface HTMLStellarCodeBlockElement extends StencilComponents.StellarCodeBlock, HTMLStencilElement {}

    var HTMLStellarCodeBlockElement: {
      prototype: HTMLStellarCodeBlockElement;
      new (): HTMLStellarCodeBlockElement;
    };
    

    interface HTMLStellarCodeElement extends StencilComponents.StellarCode, HTMLStencilElement {}

    var HTMLStellarCodeElement: {
      prototype: HTMLStellarCodeElement;
      new (): HTMLStellarCodeElement;
    };
    

    interface HTMLStellarColorPickerElement extends StencilComponents.StellarColorPicker, HTMLStencilElement {}

    var HTMLStellarColorPickerElement: {
      prototype: HTMLStellarColorPickerElement;
      new (): HTMLStellarColorPickerElement;
    };
    

    interface HTMLStellarCommentElement extends StencilComponents.StellarComment, HTMLStencilElement {}

    var HTMLStellarCommentElement: {
      prototype: HTMLStellarCommentElement;
      new (): HTMLStellarCommentElement;
    };
    

    interface HTMLStellarCommentsElement extends StencilComponents.StellarComments, HTMLStencilElement {}

    var HTMLStellarCommentsElement: {
      prototype: HTMLStellarCommentsElement;
      new (): HTMLStellarCommentsElement;
    };
    

    interface HTMLStellarContentElement extends StencilComponents.StellarContent, HTMLStencilElement {}

    var HTMLStellarContentElement: {
      prototype: HTMLStellarContentElement;
      new (): HTMLStellarContentElement;
    };
    

    interface HTMLCopyWrapElement extends StencilComponents.CopyWrap, HTMLStencilElement {}

    var HTMLCopyWrapElement: {
      prototype: HTMLCopyWrapElement;
      new (): HTMLCopyWrapElement;
    };
    

    interface HTMLStellarDocsComponentElement extends StencilComponents.StellarDocsComponent, HTMLStencilElement {}

    var HTMLStellarDocsComponentElement: {
      prototype: HTMLStellarDocsComponentElement;
      new (): HTMLStellarDocsComponentElement;
    };
    

    interface HTMLStellarDocsHeaderElement extends StencilComponents.StellarDocsHeader, HTMLStencilElement {}

    var HTMLStellarDocsHeaderElement: {
      prototype: HTMLStellarDocsHeaderElement;
      new (): HTMLStellarDocsHeaderElement;
    };
    

    interface HTMLStellarDocsHomeElement extends StencilComponents.StellarDocsHome, HTMLStencilElement {}

    var HTMLStellarDocsHomeElement: {
      prototype: HTMLStellarDocsHomeElement;
      new (): HTMLStellarDocsHomeElement;
    };
    

    interface HTMLStellarDocsNavigationElement extends StencilComponents.StellarDocsNavigation, HTMLStencilElement {}

    var HTMLStellarDocsNavigationElement: {
      prototype: HTMLStellarDocsNavigationElement;
      new (): HTMLStellarDocsNavigationElement;
    };
    

    interface HTMLStellarDocsNotFoundElement extends StencilComponents.StellarDocsNotFound, HTMLStencilElement {}

    var HTMLStellarDocsNotFoundElement: {
      prototype: HTMLStellarDocsNotFoundElement;
      new (): HTMLStellarDocsNotFoundElement;
    };
    

    interface HTMLStellarDocsPageElement extends StencilComponents.StellarDocsPage, HTMLStencilElement {}

    var HTMLStellarDocsPageElement: {
      prototype: HTMLStellarDocsPageElement;
      new (): HTMLStellarDocsPageElement;
    };
    

    interface HTMLStellarDocsElement extends StencilComponents.StellarDocs, HTMLStencilElement {}

    var HTMLStellarDocsElement: {
      prototype: HTMLStellarDocsElement;
      new (): HTMLStellarDocsElement;
    };
    

    interface HTMLStellarDocumentationElement extends StencilComponents.StellarDocumentation, HTMLStencilElement {}

    var HTMLStellarDocumentationElement: {
      prototype: HTMLStellarDocumentationElement;
      new (): HTMLStellarDocumentationElement;
    };
    

    interface HTMLStellarDropdownElement extends StencilComponents.StellarDropdown, HTMLStencilElement {}

    var HTMLStellarDropdownElement: {
      prototype: HTMLStellarDropdownElement;
      new (): HTMLStellarDropdownElement;
    };
    

    interface HTMLStellarFooterElement extends StencilComponents.StellarFooter, HTMLStencilElement {}

    var HTMLStellarFooterElement: {
      prototype: HTMLStellarFooterElement;
      new (): HTMLStellarFooterElement;
    };
    

    interface HTMLStellarFormElement extends StencilComponents.StellarForm, HTMLStencilElement {}

    var HTMLStellarFormElement: {
      prototype: HTMLStellarFormElement;
      new (): HTMLStellarFormElement;
    };
    

    interface HTMLStellarGridElement extends StencilComponents.StellarGrid, HTMLStencilElement {}

    var HTMLStellarGridElement: {
      prototype: HTMLStellarGridElement;
      new (): HTMLStellarGridElement;
    };
    

    interface HTMLStellarGroupOverflowElement extends StencilComponents.StellarGroupOverflow, HTMLStencilElement {}

    var HTMLStellarGroupOverflowElement: {
      prototype: HTMLStellarGroupOverflowElement;
      new (): HTMLStellarGroupOverflowElement;
    };
    

    interface HTMLStellarGroupElement extends StencilComponents.StellarGroup, HTMLStencilElement {}

    var HTMLStellarGroupElement: {
      prototype: HTMLStellarGroupElement;
      new (): HTMLStellarGroupElement;
    };
    

    interface HTMLStellarHeaderElement extends StencilComponents.StellarHeader, HTMLStencilElement {}

    var HTMLStellarHeaderElement: {
      prototype: HTMLStellarHeaderElement;
      new (): HTMLStellarHeaderElement;
    };
    

    interface HTMLStellarInputElement extends StencilComponents.StellarInput, HTMLStencilElement {}

    var HTMLStellarInputElement: {
      prototype: HTMLStellarInputElement;
      new (): HTMLStellarInputElement;
    };
    

    interface HTMLStellarItemElement extends StencilComponents.StellarItem, HTMLStencilElement {}

    var HTMLStellarItemElement: {
      prototype: HTMLStellarItemElement;
      new (): HTMLStellarItemElement;
    };
    

    interface HTMLStellarLabelElement extends StencilComponents.StellarLabel, HTMLStencilElement {}

    var HTMLStellarLabelElement: {
      prototype: HTMLStellarLabelElement;
      new (): HTMLStellarLabelElement;
    };
    

    interface HTMLStellarLayoutElement extends StencilComponents.StellarLayout, HTMLStencilElement {}

    var HTMLStellarLayoutElement: {
      prototype: HTMLStellarLayoutElement;
      new (): HTMLStellarLayoutElement;
    };
    

    interface HTMLStellarListElement extends StencilComponents.StellarList, HTMLStencilElement {}

    var HTMLStellarListElement: {
      prototype: HTMLStellarListElement;
      new (): HTMLStellarListElement;
    };
    

    interface HTMLStellarMessageElement extends StencilComponents.StellarMessage, HTMLStencilElement {}

    var HTMLStellarMessageElement: {
      prototype: HTMLStellarMessageElement;
      new (): HTMLStellarMessageElement;
    };
    

    interface HTMLStellarModalControllerElement extends StencilComponents.StellarModalController, HTMLStencilElement {}

    var HTMLStellarModalControllerElement: {
      prototype: HTMLStellarModalControllerElement;
      new (): HTMLStellarModalControllerElement;
    };
    

    interface HTMLStellarModalElement extends StencilComponents.StellarModal, HTMLStencilElement {}

    var HTMLStellarModalElement: {
      prototype: HTMLStellarModalElement;
      new (): HTMLStellarModalElement;
    };
    

    interface HTMLStellarOverlayElement extends StencilComponents.StellarOverlay, HTMLStencilElement {}

    var HTMLStellarOverlayElement: {
      prototype: HTMLStellarOverlayElement;
      new (): HTMLStellarOverlayElement;
    };
    

    interface HTMLStellarPaginationElement extends StencilComponents.StellarPagination, HTMLStencilElement {}

    var HTMLStellarPaginationElement: {
      prototype: HTMLStellarPaginationElement;
      new (): HTMLStellarPaginationElement;
    };
    

    interface HTMLStellarProgressElement extends StencilComponents.StellarProgress, HTMLStencilElement {}

    var HTMLStellarProgressElement: {
      prototype: HTMLStellarProgressElement;
      new (): HTMLStellarProgressElement;
    };
    

    interface HTMLStellarQuickActionsElement extends StencilComponents.StellarQuickActions, HTMLStencilElement {}

    var HTMLStellarQuickActionsElement: {
      prototype: HTMLStellarQuickActionsElement;
      new (): HTMLStellarQuickActionsElement;
    };
    

    interface HTMLStellarSelectElement extends StencilComponents.StellarSelect, HTMLStencilElement {}

    var HTMLStellarSelectElement: {
      prototype: HTMLStellarSelectElement;
      new (): HTMLStellarSelectElement;
    };
    

    interface HTMLStellarSlideElement extends StencilComponents.StellarSlide, HTMLStencilElement {}

    var HTMLStellarSlideElement: {
      prototype: HTMLStellarSlideElement;
      new (): HTMLStellarSlideElement;
    };
    

    interface HTMLStellarSlidesElement extends StencilComponents.StellarSlides, HTMLStencilElement {}

    var HTMLStellarSlidesElement: {
      prototype: HTMLStellarSlidesElement;
      new (): HTMLStellarSlidesElement;
    };
    

    interface HTMLStellarStepElement extends StencilComponents.StellarStep, HTMLStencilElement {}

    var HTMLStellarStepElement: {
      prototype: HTMLStellarStepElement;
      new (): HTMLStellarStepElement;
    };
    

    interface HTMLStellarStepsElement extends StencilComponents.StellarSteps, HTMLStencilElement {}

    var HTMLStellarStepsElement: {
      prototype: HTMLStellarStepsElement;
      new (): HTMLStellarStepsElement;
    };
    

    interface HTMLStellarSwitchElement extends StencilComponents.StellarSwitch, HTMLStencilElement {}

    var HTMLStellarSwitchElement: {
      prototype: HTMLStellarSwitchElement;
      new (): HTMLStellarSwitchElement;
    };
    

    interface HTMLStellarTabElement extends StencilComponents.StellarTab, HTMLStencilElement {}

    var HTMLStellarTabElement: {
      prototype: HTMLStellarTabElement;
      new (): HTMLStellarTabElement;
    };
    

    interface HTMLStellarTableElement extends StencilComponents.StellarTable, HTMLStencilElement {}

    var HTMLStellarTableElement: {
      prototype: HTMLStellarTableElement;
      new (): HTMLStellarTableElement;
    };
    

    interface HTMLStellarTabsElement extends StencilComponents.StellarTabs, HTMLStencilElement {}

    var HTMLStellarTabsElement: {
      prototype: HTMLStellarTabsElement;
      new (): HTMLStellarTabsElement;
    };
    

    interface HTMLStellarTagElement extends StencilComponents.StellarTag, HTMLStencilElement {}

    var HTMLStellarTagElement: {
      prototype: HTMLStellarTagElement;
      new (): HTMLStellarTagElement;
    };
    

    interface HTMLStellarToggleOptionElement extends StencilComponents.StellarToggleOption, HTMLStencilElement {}

    var HTMLStellarToggleOptionElement: {
      prototype: HTMLStellarToggleOptionElement;
      new (): HTMLStellarToggleOptionElement;
    };
    

    interface HTMLStellarToggleElement extends StencilComponents.StellarToggle, HTMLStencilElement {}

    var HTMLStellarToggleElement: {
      prototype: HTMLStellarToggleElement;
      new (): HTMLStellarToggleElement;
    };
    

    interface HTMLStellarTooltipElement extends StencilComponents.StellarTooltip, HTMLStencilElement {}

    var HTMLStellarTooltipElement: {
      prototype: HTMLStellarTooltipElement;
      new (): HTMLStellarTooltipElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'web-audio-debugger': JSXElements.WebAudioDebuggerAttributes;
    'web-audio-effect': JSXElements.WebAudioEffectAttributes;
    'web-audio-sequencer': JSXElements.WebAudioSequencerAttributes;
    'web-audio-source': JSXElements.WebAudioSourceAttributes;
    'web-audio-visualizer-shader': JSXElements.WebAudioVisualizerShaderAttributes;
    'web-audio-visualizer': JSXElements.WebAudioVisualizerAttributes;
    'web-audio': JSXElements.WebAudioAttributes;
    'stellar-asset-library': JSXElements.StellarAssetLibraryAttributes;
    'stellar-color-library': JSXElements.StellarColorLibraryAttributes;
    'stellar-markdown': JSXElements.StellarMarkdownAttributes;
    'stellar-scatter': JSXElements.StellarScatterAttributes;
    'stellar-starscape': JSXElements.StellarStarscapeAttributes;
    'stellar-story': JSXElements.StellarStoryAttributes;
    'stellar-stripe': JSXElements.StellarStripeAttributes;
    'stellar-theme-preview': JSXElements.StellarThemePreviewAttributes;
    'stellar-unit': JSXElements.StellarUnitAttributes;
    'stellar-360-image': JSXElements.Stellar360ImageAttributes;
    'stellar-360-video': JSXElements.Stellar360VideoAttributes;
    'stellar-image': JSXElements.StellarImageAttributes;
    'stellar-interview-line': JSXElements.StellarInterviewLineAttributes;
    'stellar-interview': JSXElements.StellarInterviewAttributes;
    'skeleton-img': JSXElements.SkeletonImgAttributes;
    'skeleton-text': JSXElements.SkeletonTextAttributes;
    'stellar-video': JSXElements.StellarVideoAttributes;
    'stellar-animate-text': JSXElements.StellarAnimateTextAttributes;
    'stellar-blur': JSXElements.StellarBlurAttributes;
    'stellar-parallax-section': JSXElements.StellarParallaxSectionAttributes;
    'stellar-parallax': JSXElements.StellarParallaxAttributes;
    'stellar-accordion': JSXElements.StellarAccordionAttributes;
    'stellar-asset': JSXElements.StellarAssetAttributes;
    'stellar-avatar': JSXElements.StellarAvatarAttributes;
    'stellar-breadcrumb': JSXElements.StellarBreadcrumbAttributes;
    'stellar-breadcrumbs': JSXElements.StellarBreadcrumbsAttributes;
    'stellar-button': JSXElements.StellarButtonAttributes;
    'stellar-callout': JSXElements.StellarCalloutAttributes;
    'stellar-card': JSXElements.StellarCardAttributes;
    'stellar-chart': JSXElements.StellarChartAttributes;
    'stellar-code-block': JSXElements.StellarCodeBlockAttributes;
    'stellar-code': JSXElements.StellarCodeAttributes;
    'stellar-color-picker': JSXElements.StellarColorPickerAttributes;
    'stellar-comment': JSXElements.StellarCommentAttributes;
    'stellar-comments': JSXElements.StellarCommentsAttributes;
    'stellar-content': JSXElements.StellarContentAttributes;
    'copy-wrap': JSXElements.CopyWrapAttributes;
    'stellar-docs-component': JSXElements.StellarDocsComponentAttributes;
    'stellar-docs-header': JSXElements.StellarDocsHeaderAttributes;
    'stellar-docs-home': JSXElements.StellarDocsHomeAttributes;
    'stellar-docs-navigation': JSXElements.StellarDocsNavigationAttributes;
    'stellar-docs-not-found': JSXElements.StellarDocsNotFoundAttributes;
    'stellar-docs-page': JSXElements.StellarDocsPageAttributes;
    'stellar-docs': JSXElements.StellarDocsAttributes;
    'stellar-documentation': JSXElements.StellarDocumentationAttributes;
    'stellar-dropdown': JSXElements.StellarDropdownAttributes;
    'stellar-footer': JSXElements.StellarFooterAttributes;
    'stellar-form': JSXElements.StellarFormAttributes;
    'stellar-grid': JSXElements.StellarGridAttributes;
    'stellar-group-overflow': JSXElements.StellarGroupOverflowAttributes;
    'stellar-group': JSXElements.StellarGroupAttributes;
    'stellar-header': JSXElements.StellarHeaderAttributes;
    'stellar-input': JSXElements.StellarInputAttributes;
    'stellar-item': JSXElements.StellarItemAttributes;
    'stellar-label': JSXElements.StellarLabelAttributes;
    'stellar-layout': JSXElements.StellarLayoutAttributes;
    'stellar-list': JSXElements.StellarListAttributes;
    'stellar-message': JSXElements.StellarMessageAttributes;
    'stellar-modal-controller': JSXElements.StellarModalControllerAttributes;
    'stellar-modal': JSXElements.StellarModalAttributes;
    'stellar-overlay': JSXElements.StellarOverlayAttributes;
    'stellar-pagination': JSXElements.StellarPaginationAttributes;
    'stellar-progress': JSXElements.StellarProgressAttributes;
    'stellar-quick-actions': JSXElements.StellarQuickActionsAttributes;
    'stellar-select': JSXElements.StellarSelectAttributes;
    'stellar-slide': JSXElements.StellarSlideAttributes;
    'stellar-slides': JSXElements.StellarSlidesAttributes;
    'stellar-step': JSXElements.StellarStepAttributes;
    'stellar-steps': JSXElements.StellarStepsAttributes;
    'stellar-switch': JSXElements.StellarSwitchAttributes;
    'stellar-tab': JSXElements.StellarTabAttributes;
    'stellar-table': JSXElements.StellarTableAttributes;
    'stellar-tabs': JSXElements.StellarTabsAttributes;
    'stellar-tag': JSXElements.StellarTagAttributes;
    'stellar-toggle-option': JSXElements.StellarToggleOptionAttributes;
    'stellar-toggle': JSXElements.StellarToggleAttributes;
    'stellar-tooltip': JSXElements.StellarTooltipAttributes;
    }
  }

  namespace JSXElements {

    export interface WebAudioDebuggerAttributes extends HTMLAttributes {
      'count'?: number;
    }

    export interface WebAudioEffectAttributes extends HTMLAttributes {
      'axis'?: string;
      'method'?: string;
      'midicontroller'?: number;
      'responds'?: string;
      'type'?: string;
      'use'?: string;
      'value'?: number;
    }

    export interface WebAudioSequencerAttributes extends HTMLAttributes {
      'autoplay'?: boolean;
      'custom'?: Function;
      'name'?: string;
      'taps'?: number;
      'tempo'?: number;
    }

    export interface WebAudioSourceAttributes extends HTMLAttributes {
      'effectsvolume'?: number;
      'inert'?: boolean;
      'midichannel'?: number;
      'midikey'?: number;
      'name'?: string;
      'onTimeupdate'?: (event: CustomEvent) => void;
      'playing'?: boolean;
      'src'?: string;
    }

    export interface WebAudioVisualizerShaderAttributes extends HTMLAttributes {
      'type'?: string;
    }

    export interface WebAudioVisualizerAttributes extends HTMLAttributes {
      'color'?: string;
      'for'?: string;
      'height'?: number;
      'renderer'?: AnalyserNode;
      'size'?: number;
      'smoothing'?: number;
      'type'?: string|"wave"|"bars"|"webgl";
      'width'?: number;
    }

    export interface WebAudioAttributes extends HTMLAttributes {
      'autoplay'?: Boolean;
      'midi'?: Boolean;
      'name'?: string;
    }

    export interface StellarAssetLibraryAttributes extends HTMLAttributes {

    }

    export interface StellarColorLibraryAttributes extends HTMLAttributes {

    }

    export interface StellarMarkdownAttributes extends HTMLAttributes {
      'codeString'?: string;
      'src'?: string;
    }

    export interface StellarScatterAttributes extends HTMLAttributes {
      'colors'?: boolean;
      'float'?: boolean;
      'max'?: number;
      'min'?: number;
      'scatter'?: number;
      'sizes'?: boolean;
    }

    export interface StellarStarscapeAttributes extends HTMLAttributes {

    }

    export interface StellarStoryAttributes extends HTMLAttributes {
      'target'?: string;
    }

    export interface StellarStripeAttributes extends HTMLAttributes {
      'name'?: string;
      'token'?: string;
    }

    export interface StellarThemePreviewAttributes extends HTMLAttributes {
      'base'?: string;
      'complement'?: string;
    }

    export interface StellarUnitAttributes extends HTMLAttributes {
      'decimals'?: number;
      'from'?: string;
      'round'?: boolean;
      'to'?: string;
      'value'?: number;
    }

    export interface Stellar360ImageAttributes extends HTMLAttributes {
      'height'?: number;
      'poster'?: string;
      'src'?: string;
      'width'?: number;
    }

    export interface Stellar360VideoAttributes extends HTMLAttributes {
      'height'?: number;
      'poster'?: string;
      'src'?: string;
      'width'?: number;
    }

    export interface StellarImageAttributes extends HTMLAttributes {
      'bg'?: string;
      'height'?: number;
      'nozoom'?: boolean;
      'poster'?: string;
      'width'?: number;
    }

    export interface StellarInterviewLineAttributes extends HTMLAttributes {
      'complement'?: boolean;
      'in'?: number;
      'out'?: number;
    }

    export interface StellarInterviewAttributes extends HTMLAttributes {
      'aspectRatio'?: number;
      'debug'?: boolean;
      'height'?: number;
      'label'?: string;
      'playing'?: boolean;
      'src'?: string;
      'width'?: number;
    }

    export interface SkeletonImgAttributes extends HTMLAttributes {
      'height'?: number;
      'icon'?: boolean;
      'loading'?: boolean;
      'width'?: number;
    }

    export interface SkeletonTextAttributes extends HTMLAttributes {
      'as'?: string|'h1'|'h2'|'h3'|'h4'|'h5'|'h6'|'p';
      'loading'?: boolean;
      'width'?: number;
    }

    export interface StellarVideoAttributes extends HTMLAttributes {
      'autoplay'?: boolean;
      'controls'?: boolean;
      'height'?: number;
      'muted'?: boolean;
      'overlay'?: boolean;
      'playsinline'?: boolean;
      'poster'?: string;
      'preload'?: string;
      'width'?: number;
    }

    export interface StellarAnimateTextAttributes extends HTMLAttributes {
      'method'?: string|"glitch"|"lettering"|"weight"|"fade";
    }

    export interface StellarBlurAttributes extends HTMLAttributes {
      'horizontal'?: number;
      'vertical'?: number;
    }

    export interface StellarParallaxSectionAttributes extends HTMLAttributes {
      'layer'?: number;
      'percentage'?: number;
      'speed'?: number;
    }

    export interface StellarParallaxAttributes extends HTMLAttributes {

    }

    export interface StellarAccordionAttributes extends HTMLAttributes {
      'label'?: string;
      'name'?: string;
      'open'?: boolean;
      'tight'?: boolean;
    }

    export interface StellarAssetAttributes extends HTMLAttributes {
      'align'?: string;
      'ariaLabel'?: string;
      'block'?: boolean;
      'language'?: string;
      'name'?: string;
      'src'?: string;
    }

    export interface StellarAvatarAttributes extends HTMLAttributes {
      'color'?: string;
      'initials'?: string;
      'name'?: string;
      'notooltip'?: boolean;
      'processing'?: boolean;
      'shape'?: "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
      'size'?: string;
      'src'?: string;
    }

    export interface StellarBreadcrumbAttributes extends HTMLAttributes {
      'color'?: string;
      'disabled'?: boolean;
      'href'?: string;
      'label'?: string;
      'target'?: string;
    }

    export interface StellarBreadcrumbsAttributes extends HTMLAttributes {
      'color'?: string;
      'description'?: string;
      'home'?: string;
      'icon'?: string;
      'icon_size'?: number;
      'icon_src'?: string;
      'label'?: string;
    }

    export interface StellarButtonAttributes extends HTMLAttributes {
      /**
       * Sets the button or link as an active state.
       */
      'active'?: boolean;
      /**
       * Sets the button or link to render at full width to the parent.
       */
      'block'?: boolean;
      /**
       * Sets the button or link to provide the affordance of a dangerous action.
       */
      'danger'?: boolean;
      /**
       * Sets the button or link as disabled and not-interactable.
       */
      'disabled'?: boolean;
      /**
       * Sets the href on the anchor tag if the button is a link.
       */
      'for'?: string;
      'ghost'?: boolean;
      /**
       * Sets the href on the anchor tag if the button is a link.
       */
      'href'?: string;
      /**
       * Sets the button or link as a button with only an icon.
       */
      'icon'?: boolean;
      /**
       * Sets the button or link as an outlined button.
       */
      'invert'?: boolean;
      /**
       * Sets accessibility options on the buttons
       */
      'label'?: string;
      /**
       * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
       */
      'name'?: string;
      /**
       * Sets the button or link as an outlined button.
       */
      'outline'?: boolean;
      /**
       * Sets the padding inside of the button. Can be small, medium, or large.
       */
      'padding'?: string|"small"|"medium"|"large";
      /**
       * Sets the button or link to render as a pill.
       */
      'pill'?: boolean;
      /**
       * Sets the button or link as processing when clicked.
       */
      'processable'?: boolean;
      /**
       * Sets the size of the button. Can be tiny, small, medium, or large.
       */
      'size'?: string|"tiny"|"small"|"medium"|"large";
      /**
       * Allows the button to render for different tags.
       */
      'tag'?: "button"|"submit"|"link"|"span";
      /**
       * Sets the target on the anchor tag if the button is a link.
       */
      'target'?: string;
      /**
       * Sets the value on the button if the button is an input.
       */
      'value'?: string;
    }

    export interface StellarCalloutAttributes extends HTMLAttributes {
      'type'?: "alert"|"error"|"info"|"success";
    }

    export interface StellarCardAttributes extends HTMLAttributes {
      /**
       * Sets the href on the anchor tag if the button is a link.
       */
      'for'?: string;
      /**
       * Sets the href if the card is a link.
       */
      'href'?: string;
      /**
       * Sets the name if the card is a button.
       */
      'name'?: string;
      /**
       * Sets the padding inside of the button. Can be small, medium, or large.
       */
      'padding'?: string|"small"|"medium"|"large";
      /**
       * Renders a shadow on the card
       */
      'shadow'?: string|"light"|"medium"|"heavy";
      /**
       * Sets the element to render the card as - an anchor tag, a button, or a div.
       */
      'tag'?: "a"|"button"|"div";
      'transition'?: boolean;
      /**
       * Sets the value if the card is a button.
       */
      'value'?: string;
    }

    export interface StellarChartAttributes extends HTMLAttributes {
      'for'?: string;
      'random'?: boolean;
      'remote'?: string;
      'type'?: string;
    }

    export interface StellarCodeBlockAttributes extends HTMLAttributes {
      'codeString'?: string;
      'copy'?: boolean;
      'language'?: string;
      'numbers'?: boolean;
      'simple'?: boolean;
    }

    export interface StellarCodeAttributes extends HTMLAttributes {
      'codeString'?: string;
      'language'?: string;
      'numbers'?: boolean;
    }

    export interface StellarColorPickerAttributes extends HTMLAttributes {
      'onColorChanged'?: (event: CustomEvent) => void;
      'value'?: string;
    }

    export interface StellarCommentAttributes extends HTMLAttributes {
      'content'?: any;
      'name'?: any;
    }

    export interface StellarCommentsAttributes extends HTMLAttributes {

    }

    export interface StellarContentAttributes extends HTMLAttributes {
      'for'?: string;
      'name'?: string;
      'open'?: boolean;
    }

    export interface CopyWrapAttributes extends HTMLAttributes {
      'align'?: string;
      'full'?: boolean;
    }

    export interface StellarDocsComponentAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }

    export interface StellarDocsHeaderAttributes extends HTMLAttributes {
      'complement'?: string;
      'invert'?: boolean;
      'mark'?: string;
      'max'?: number;
      'theme'?: string;
      'value'?: number;
    }

    export interface StellarDocsHomeAttributes extends HTMLAttributes {

    }

    export interface StellarDocsNavigationAttributes extends HTMLAttributes {

    }

    export interface StellarDocsNotFoundAttributes extends HTMLAttributes {

    }

    export interface StellarDocsPageAttributes extends HTMLAttributes {
      'match'?: MatchResults;
    }

    export interface StellarDocsAttributes extends HTMLAttributes {

    }

    export interface StellarDocumentationAttributes extends HTMLAttributes {
      'codeString'?: string;
      'feature'?: string;
      'preview'?: boolean;
      'property'?: string;
      'type'?: string;
    }

    export interface StellarDropdownAttributes extends HTMLAttributes {
      'icon'?: boolean;
      'label'?: string;
      'open'?: boolean;
      'position'?: "left"|"center"|"right";
    }

    export interface StellarFooterAttributes extends HTMLAttributes {

    }

    export interface StellarFormAttributes extends HTMLAttributes {
      'acceptCharset'?: string;
      'action'?: string;
      'ajax'?: boolean;
      'autocomplete'?: string;
      'enctype'?: string;
      'method'?: string;
      'name'?: string;
      'novalidate'?: boolean;
      'target'?: string;
    }

    export interface StellarGridAttributes extends HTMLAttributes {
      'align'?: string;
      'cols'?: number|string;
      'compact'?: boolean;
      'padding'?: boolean;
      'responsive'?: boolean;
    }

    export interface StellarGroupOverflowAttributes extends HTMLAttributes {
      'count'?: number;
      'size'?: string;
    }

    export interface StellarGroupAttributes extends HTMLAttributes {
      'count'?: number;
      'overflow'?: boolean;
      'size'?: string;
    }

    export interface StellarHeaderAttributes extends HTMLAttributes {
      'invert'?: boolean;
      'mark'?: string;
      'max'?: number;
      'value'?: number;
    }

    export interface StellarInputAttributes extends HTMLAttributes {
      'autocomplete'?: string;
      'autofocus'?: boolean;
      'color'?: string;
      'cols'?: number;
      'disabled'?: boolean;
      'focused'?: boolean;
      'label'?: string;
      'match'?: string;
      'max'?: number;
      'maxlength'?: number;
      'min'?: number;
      /**
       * The name of the input element
       */
      'name'?: string;
      'novalidation'?: boolean;
      /**
       * Public: Changed event
       */
      'onValueChanged'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'readonly'?: boolean;
      'required'?: boolean;
      'rows'?: number;
      'size'?: string;
      'spellcheck'?: boolean;
      'step'?: number;
      /**
       * The kind of element that the Input should be rendered as
       */
      'type'?: string;
      'validates'?: string;
      /**
       * The pre-set value to pass to the input element
       */
      'value'?: any;
      'wrap'?: string;
    }

    export interface StellarItemAttributes extends HTMLAttributes {
      'danger'?: boolean;
      'fit'?: boolean;
      'focused'?: boolean;
      'history'?: RouterHistory;
      'href'?: string;
      'label'?: string;
      'location'?: LocationSegments;
      'onBlurChanged'?: (event: CustomEvent) => void;
      'onFocusChanged'?: (event: CustomEvent) => void;
      'onSelectionChanged'?: (event: CustomEvent) => void;
      'route'?: boolean;
      'selectable'?: boolean;
      'selected'?: boolean;
      'size'?: string;
      'type'?: "a"|"button";
      'value'?: string;
    }

    export interface StellarLabelAttributes extends HTMLAttributes {
      'for'?: string;
    }

    export interface StellarLayoutAttributes extends HTMLAttributes {
      'align'?: "baseline"|"center"|"top"|"bottom";
      'padding'?: "tiny"|"small"|"medium"|"large";
      'size'?: "tiny"|"small"|"medium"|"large"|"full"|"flush";
      'type'?: string;
    }

    export interface StellarListAttributes extends HTMLAttributes {
      'itemHeight'?: number;
      'items'?: Array<any>;
    }

    export interface StellarMessageAttributes extends HTMLAttributes {
      'closable'?: boolean;
      'name'?: string;
      'remember'?: boolean;
      'size'?: "full"|"default";
      'striped'?: boolean;
      'type'?: "alert"|"error"|"info"|"success";
      'visible'?: boolean;
    }

    export interface StellarModalControllerAttributes extends HTMLAttributes {
      'size'?: string;
      'state'?: string|"opening"|"open"|"closing"|"closed"|"empty";
      'timing'?: number;
    }

    export interface StellarModalAttributes extends HTMLAttributes {
      'active'?: boolean;
      'cloned'?: boolean;
      'header'?: boolean;
      'name'?: string;
      'size'?: string;
    }

    export interface StellarOverlayAttributes extends HTMLAttributes {
      'open'?: boolean;
    }

    export interface StellarPaginationAttributes extends HTMLAttributes {
      'color'?: string;
      'current'?: number;
      'onChanged'?: (event: CustomEvent) => void;
      'padding'?: number;
      /**
       * Public: Sets the max cap of pages you can skip through
       */
      'pages'?: number;
      'type'?: "full"|"compact";
      'url'?: any;
    }

    export interface StellarProgressAttributes extends HTMLAttributes {
      'blurable'?: boolean;
      /**
       * Allows the progress bar to be clicked on, to help the user to navigate through the progressing content.
       */
      'editable'?: boolean;
      /**
       * Sets the maximum cap for steps in the progress bar
       */
      'max'?: number;
      /**
       * eliminates the easing in the css so you can apply value updates without jitter.
       */
      'noease'?: boolean;
      'onValueChange'?: (event: CustomEvent) => void;
      /**
       * Renders if this element is slender or not
       */
      'slender'?: boolean;
      /**
       * Sets the value of the progress bar
       */
      'value'?: number;
    }

    export interface StellarQuickActionsAttributes extends HTMLAttributes {
      'open'?: boolean;
    }

    export interface StellarSelectAttributes extends HTMLAttributes {
      'focused'?: boolean;
      'footer'?: boolean;
      'inline'?: boolean;
      'label'?: string;
      'multiple'?: boolean;
      'name'?: string;
      'onChange'?: (event: CustomEvent) => void;
      'open'?: boolean;
      'other'?: boolean;
      'overlay'?: boolean;
      'placeholder'?: string;
      'processing'?: boolean;
      'required'?: boolean;
      'size'?: string;
      'value'?: any;
    }

    export interface StellarSlideAttributes extends HTMLAttributes {
      'motion'?: number;
    }

    export interface StellarSlidesAttributes extends HTMLAttributes {
      'autoHeight'?: boolean;
      'centeredSlides'?: boolean;
      'direction'?: "horizontal"|"vertical";
      'effect'?: "slide"|"fade"|"cube"|"coverflow"|"flip";
      'loop'?: boolean;
      'nested'?: boolean;
      /**
       * Emitted after the active slide has changed.
       */
      'onIonSlideDidChange'?: (event: CustomEvent) => void;
      /**
       * Emitted when the slider is actively being moved.
       */
      'onIonSlideDrag'?: (event: CustomEvent) => void;
      /**
       * Emitted when the next slide has ended.
       */
      'onIonSlideNextEnd'?: (event: CustomEvent) => void;
      /**
       * Emitted when the next slide has started.
       */
      'onIonSlideNextStart'?: (event: CustomEvent) => void;
      /**
       * Emitted when the previous slide has ended.
       */
      'onIonSlidePrevEnd'?: (event: CustomEvent) => void;
      /**
       * Emitted when the previous slide has started.
       */
      'onIonSlidePrevStart'?: (event: CustomEvent) => void;
      /**
       * Emitted when the slider is at the last slide.
       */
      'onIonSlideReachEnd'?: (event: CustomEvent) => void;
      /**
       * Emitted when the slider is at its initial position.
       */
      'onIonSlideReachStart'?: (event: CustomEvent) => void;
      /**
       * Emitted when the user releases the touch.
       */
      'onIonSlideTouchEnd'?: (event: CustomEvent) => void;
      /**
       * Emitted when the user first touches the slider.
       */
      'onIonSlideTouchStart'?: (event: CustomEvent) => void;
      /**
       * Emitted when the slide transition has ended.
       */
      'onIonSlideTransitionEnd'?: (event: CustomEvent) => void;
      /**
       * Emitted when the slide transition has started.
       */
      'onIonSlideTransitionStart'?: (event: CustomEvent) => void;
      /**
       * Emitted before the active slide has changed.
       */
      'onIonSlideWillChange'?: (event: CustomEvent) => void;
      /**
       * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
       */
      'options'?: any;
      /**
       * Show or hide the pager
       */
      'pager'?: boolean;
      'pagination'?: boolean;
      'slidesPerView'?: number;
      'spaceBetween'?: number;
      'speed'?: number;
      'watchSlidesProgress'?: boolean;
      'watchSlidesVisibility'?: boolean;
    }

    export interface StellarStepAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'href'?: string;
      'onContentChange'?: (event: CustomEvent) => void;
      'open'?: boolean;
      'order'?: number;
      'tabCount'?: number;
    }

    export interface StellarStepsAttributes extends HTMLAttributes {
      'name'?: string;
    }

    export interface StellarSwitchAttributes extends HTMLAttributes {
      'checked'?: boolean;
    }

    export interface StellarTabAttributes extends HTMLAttributes {
      'disabled'?: boolean;
      'href'?: string;
      'notifications'?: boolean|number;
      'onContentChange'?: (event: CustomEvent) => void;
      'open'?: boolean;
      'order'?: number;
      'tabCount'?: number;
      'tag'?: string;
    }

    export interface StellarTableAttributes extends HTMLAttributes {
      'chart'?: boolean;
      'name'?: string;
      'striped'?: boolean;
      'upgrade'?: boolean;
    }

    export interface StellarTabsAttributes extends HTMLAttributes {
      'block'?: boolean;
      'blurring'?: number;
      'height'?: string;
      'name'?: string;
      'noanimation'?: boolean;
    }

    export interface StellarTagAttributes extends HTMLAttributes {
      'color'?: string;
      'outline'?: boolean;
      'pill'?: boolean;
      'size'?: string;
      'textColor'?: string;
    }

    export interface StellarToggleOptionAttributes extends HTMLAttributes {
      'checked'?: boolean;
      'default'?: string;
      'for'?: string;
      'icon'?: boolean;
      'inline'?: boolean;
      'name'?: string;
      'onToggleChanged'?: (event: CustomEvent) => void;
      'required'?: boolean;
      'selectedCopy'?: string;
      'single'?: boolean;
      'size'?: boolean;
      'type'?: string;
      'value'?: string;
    }

    export interface StellarToggleAttributes extends HTMLAttributes {
      'card'?: string;
      'flip'?: boolean;
      'label'?: string;
      'name'?: string;
      'required'?: boolean;
      'single'?: boolean;
      'size'?: string;
      'stacked'?: boolean;
      'type'?: string|"checkbox"|"radio"|"radio-block"|"checkbox-block";
      'value'?: string;
    }

    export interface StellarTooltipAttributes extends HTMLAttributes {
      'align'?: "left"|"center"|"right";
    }
  }

  interface HTMLElementTagNameMap {
    'web-audio-debugger': HTMLWebAudioDebuggerElement
    'web-audio-effect': HTMLWebAudioEffectElement
    'web-audio-sequencer': HTMLWebAudioSequencerElement
    'web-audio-source': HTMLWebAudioSourceElement
    'web-audio-visualizer-shader': HTMLWebAudioVisualizerShaderElement
    'web-audio-visualizer': HTMLWebAudioVisualizerElement
    'web-audio': HTMLWebAudioElement
    'stellar-asset-library': HTMLStellarAssetLibraryElement
    'stellar-color-library': HTMLStellarColorLibraryElement
    'stellar-markdown': HTMLStellarMarkdownElement
    'stellar-scatter': HTMLStellarScatterElement
    'stellar-starscape': HTMLStellarStarscapeElement
    'stellar-story': HTMLStellarStoryElement
    'stellar-stripe': HTMLStellarStripeElement
    'stellar-theme-preview': HTMLStellarThemePreviewElement
    'stellar-unit': HTMLStellarUnitElement
    'stellar-360-image': HTMLStellar360ImageElement
    'stellar-360-video': HTMLStellar360VideoElement
    'stellar-image': HTMLStellarImageElement
    'stellar-interview-line': HTMLStellarInterviewLineElement
    'stellar-interview': HTMLStellarInterviewElement
    'skeleton-img': HTMLSkeletonImgElement
    'skeleton-text': HTMLSkeletonTextElement
    'stellar-video': HTMLStellarVideoElement
    'stellar-animate-text': HTMLStellarAnimateTextElement
    'stellar-blur': HTMLStellarBlurElement
    'stellar-parallax-section': HTMLStellarParallaxSectionElement
    'stellar-parallax': HTMLStellarParallaxElement
    'stellar-accordion': HTMLStellarAccordionElement
    'stellar-asset': HTMLStellarAssetElement
    'stellar-avatar': HTMLStellarAvatarElement
    'stellar-breadcrumb': HTMLStellarBreadcrumbElement
    'stellar-breadcrumbs': HTMLStellarBreadcrumbsElement
    'stellar-button': HTMLStellarButtonElement
    'stellar-callout': HTMLStellarCalloutElement
    'stellar-card': HTMLStellarCardElement
    'stellar-chart': HTMLStellarChartElement
    'stellar-code-block': HTMLStellarCodeBlockElement
    'stellar-code': HTMLStellarCodeElement
    'stellar-color-picker': HTMLStellarColorPickerElement
    'stellar-comment': HTMLStellarCommentElement
    'stellar-comments': HTMLStellarCommentsElement
    'stellar-content': HTMLStellarContentElement
    'copy-wrap': HTMLCopyWrapElement
    'stellar-docs-component': HTMLStellarDocsComponentElement
    'stellar-docs-header': HTMLStellarDocsHeaderElement
    'stellar-docs-home': HTMLStellarDocsHomeElement
    'stellar-docs-navigation': HTMLStellarDocsNavigationElement
    'stellar-docs-not-found': HTMLStellarDocsNotFoundElement
    'stellar-docs-page': HTMLStellarDocsPageElement
    'stellar-docs': HTMLStellarDocsElement
    'stellar-documentation': HTMLStellarDocumentationElement
    'stellar-dropdown': HTMLStellarDropdownElement
    'stellar-footer': HTMLStellarFooterElement
    'stellar-form': HTMLStellarFormElement
    'stellar-grid': HTMLStellarGridElement
    'stellar-group-overflow': HTMLStellarGroupOverflowElement
    'stellar-group': HTMLStellarGroupElement
    'stellar-header': HTMLStellarHeaderElement
    'stellar-input': HTMLStellarInputElement
    'stellar-item': HTMLStellarItemElement
    'stellar-label': HTMLStellarLabelElement
    'stellar-layout': HTMLStellarLayoutElement
    'stellar-list': HTMLStellarListElement
    'stellar-message': HTMLStellarMessageElement
    'stellar-modal-controller': HTMLStellarModalControllerElement
    'stellar-modal': HTMLStellarModalElement
    'stellar-overlay': HTMLStellarOverlayElement
    'stellar-pagination': HTMLStellarPaginationElement
    'stellar-progress': HTMLStellarProgressElement
    'stellar-quick-actions': HTMLStellarQuickActionsElement
    'stellar-select': HTMLStellarSelectElement
    'stellar-slide': HTMLStellarSlideElement
    'stellar-slides': HTMLStellarSlidesElement
    'stellar-step': HTMLStellarStepElement
    'stellar-steps': HTMLStellarStepsElement
    'stellar-switch': HTMLStellarSwitchElement
    'stellar-tab': HTMLStellarTabElement
    'stellar-table': HTMLStellarTableElement
    'stellar-tabs': HTMLStellarTabsElement
    'stellar-tag': HTMLStellarTagElement
    'stellar-toggle-option': HTMLStellarToggleOptionElement
    'stellar-toggle': HTMLStellarToggleElement
    'stellar-tooltip': HTMLStellarTooltipElement
  }

  interface ElementTagNameMap {
    'web-audio-debugger': HTMLWebAudioDebuggerElement;
    'web-audio-effect': HTMLWebAudioEffectElement;
    'web-audio-sequencer': HTMLWebAudioSequencerElement;
    'web-audio-source': HTMLWebAudioSourceElement;
    'web-audio-visualizer-shader': HTMLWebAudioVisualizerShaderElement;
    'web-audio-visualizer': HTMLWebAudioVisualizerElement;
    'web-audio': HTMLWebAudioElement;
    'stellar-asset-library': HTMLStellarAssetLibraryElement;
    'stellar-color-library': HTMLStellarColorLibraryElement;
    'stellar-markdown': HTMLStellarMarkdownElement;
    'stellar-scatter': HTMLStellarScatterElement;
    'stellar-starscape': HTMLStellarStarscapeElement;
    'stellar-story': HTMLStellarStoryElement;
    'stellar-stripe': HTMLStellarStripeElement;
    'stellar-theme-preview': HTMLStellarThemePreviewElement;
    'stellar-unit': HTMLStellarUnitElement;
    'stellar-360-image': HTMLStellar360ImageElement;
    'stellar-360-video': HTMLStellar360VideoElement;
    'stellar-image': HTMLStellarImageElement;
    'stellar-interview-line': HTMLStellarInterviewLineElement;
    'stellar-interview': HTMLStellarInterviewElement;
    'skeleton-img': HTMLSkeletonImgElement;
    'skeleton-text': HTMLSkeletonTextElement;
    'stellar-video': HTMLStellarVideoElement;
    'stellar-animate-text': HTMLStellarAnimateTextElement;
    'stellar-blur': HTMLStellarBlurElement;
    'stellar-parallax-section': HTMLStellarParallaxSectionElement;
    'stellar-parallax': HTMLStellarParallaxElement;
    'stellar-accordion': HTMLStellarAccordionElement;
    'stellar-asset': HTMLStellarAssetElement;
    'stellar-avatar': HTMLStellarAvatarElement;
    'stellar-breadcrumb': HTMLStellarBreadcrumbElement;
    'stellar-breadcrumbs': HTMLStellarBreadcrumbsElement;
    'stellar-button': HTMLStellarButtonElement;
    'stellar-callout': HTMLStellarCalloutElement;
    'stellar-card': HTMLStellarCardElement;
    'stellar-chart': HTMLStellarChartElement;
    'stellar-code-block': HTMLStellarCodeBlockElement;
    'stellar-code': HTMLStellarCodeElement;
    'stellar-color-picker': HTMLStellarColorPickerElement;
    'stellar-comment': HTMLStellarCommentElement;
    'stellar-comments': HTMLStellarCommentsElement;
    'stellar-content': HTMLStellarContentElement;
    'copy-wrap': HTMLCopyWrapElement;
    'stellar-docs-component': HTMLStellarDocsComponentElement;
    'stellar-docs-header': HTMLStellarDocsHeaderElement;
    'stellar-docs-home': HTMLStellarDocsHomeElement;
    'stellar-docs-navigation': HTMLStellarDocsNavigationElement;
    'stellar-docs-not-found': HTMLStellarDocsNotFoundElement;
    'stellar-docs-page': HTMLStellarDocsPageElement;
    'stellar-docs': HTMLStellarDocsElement;
    'stellar-documentation': HTMLStellarDocumentationElement;
    'stellar-dropdown': HTMLStellarDropdownElement;
    'stellar-footer': HTMLStellarFooterElement;
    'stellar-form': HTMLStellarFormElement;
    'stellar-grid': HTMLStellarGridElement;
    'stellar-group-overflow': HTMLStellarGroupOverflowElement;
    'stellar-group': HTMLStellarGroupElement;
    'stellar-header': HTMLStellarHeaderElement;
    'stellar-input': HTMLStellarInputElement;
    'stellar-item': HTMLStellarItemElement;
    'stellar-label': HTMLStellarLabelElement;
    'stellar-layout': HTMLStellarLayoutElement;
    'stellar-list': HTMLStellarListElement;
    'stellar-message': HTMLStellarMessageElement;
    'stellar-modal-controller': HTMLStellarModalControllerElement;
    'stellar-modal': HTMLStellarModalElement;
    'stellar-overlay': HTMLStellarOverlayElement;
    'stellar-pagination': HTMLStellarPaginationElement;
    'stellar-progress': HTMLStellarProgressElement;
    'stellar-quick-actions': HTMLStellarQuickActionsElement;
    'stellar-select': HTMLStellarSelectElement;
    'stellar-slide': HTMLStellarSlideElement;
    'stellar-slides': HTMLStellarSlidesElement;
    'stellar-step': HTMLStellarStepElement;
    'stellar-steps': HTMLStellarStepsElement;
    'stellar-switch': HTMLStellarSwitchElement;
    'stellar-tab': HTMLStellarTabElement;
    'stellar-table': HTMLStellarTableElement;
    'stellar-tabs': HTMLStellarTabsElement;
    'stellar-tag': HTMLStellarTagElement;
    'stellar-toggle-option': HTMLStellarToggleOptionElement;
    'stellar-toggle': HTMLStellarToggleElement;
    'stellar-tooltip': HTMLStellarTooltipElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;